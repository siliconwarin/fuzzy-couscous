
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import type { UserAnswer, QuizResult } from "@/types/quiz";
import { Trophy, RotateCcw, Share2 } from "lucide-react";

const Result = () => {
  const navigate = useNavigate();
  const [result, setResult] = useState<QuizResult | null>(null);

  useEffect(() => {
    const savedData = localStorage.getItem('scam-quiz-results');
    if (!savedData) {
      navigate('/');
      return;
    }

    const { answers } = JSON.parse(savedData);

    // Calculate results
    const correctAnswers = answers.filter((a: UserAnswer) => a.isCorrect).length;
    const carefulAnswers = answers.filter((a: UserAnswer) => a.personality === 'careful').length;
    const trustingAnswers = answers.filter((a: UserAnswer) => a.personality === 'trusting').length;

    let personality: 'careful' | 'trusting' | 'balanced';
    if (carefulAnswers > trustingAnswers) {
      personality = 'careful';
    } else if (trustingAnswers > carefulAnswers) {
      personality = 'trusting';
    } else {
      personality = 'balanced';
    }

    const quizResult: QuizResult = {
      score: correctAnswers,
      totalQuestions: answers.length,
      personality,
      answers
    };

    setResult(quizResult);
  }, [navigate]);

  const handleRestart = () => {
    localStorage.removeItem('scam-quiz-results');
    localStorage.removeItem('scam-quiz-user-id');
    navigate('/');
  };

  const getPersonalityInfo = (personality: string) => {
    switch (personality) {
      case 'careful':
        return {
          title: 'üõ°Ô∏è ‡∏ô‡∏±‡∏Å‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏î‡∏µ',
          description: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏¥‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à ‡∏ã‡∏∂‡πà‡∏á‡∏ä‡πà‡∏ß‡∏¢‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏´‡∏¢‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏â‡πâ‡∏≠‡πÇ‡∏Å‡∏á‡πÑ‡∏î‡πâ‡∏î‡∏µ',
          color: 'bg-quiz-correct text-white'
        };
      case 'trusting':
        return {
          title: 'üíù ‡∏Ñ‡∏ô‡πÉ‡∏à‡∏î‡∏µ',
          description: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏à‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß',
          color: 'bg-quiz-orange text-white'
        };
      case 'balanced':
        return {
          title: '‚öñÔ∏è ‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏î‡∏µ',
          description: '‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á',
          color: 'bg-quiz-blue text-white'
        };
      default:
        return {
          title: 'üéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå',
          description: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          color: 'bg-gray-500 text-white'
        };
    }
  };

  if (!result) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-quiz-blue to-quiz-blue-dark flex items-center justify-center">
        <div className="text-white text-xl">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
      </div>
    );
  }

  const personalityInfo = getPersonalityInfo(result.personality);
  const scorePercentage = Math.round((result.score / result.totalQuestions) * 100);

  return (
    <div className="min-h-screen bg-gradient-to-br from-quiz-blue to-quiz-blue-dark p-4">
      <div className="max-w-2xl mx-auto pt-8">
        <Card className="mb-6">
          <CardHeader className="text-center">
            <div className="flex justify-center mb-4">
              <Trophy className="w-16 h-16 text-quiz-orange" />
            </div>
            <CardTitle className="text-2xl text-quiz-blue-dark">
              ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Score */}
            <div className="text-center">
              <div className="text-4xl font-bold text-quiz-blue-dark mb-2">
                {result.score}/{result.totalQuestions}
              </div>
              <div className="text-lg text-muted-foreground">
                ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {scorePercentage}%
              </div>
            </div>

            {/* Personality Result */}
            <div className="text-center">
              <Badge className={`${personalityInfo.color} text-lg px-4 py-2 mb-3`}>
                {personalityInfo.title}
              </Badge>
              <p className="text-sm leading-relaxed text-gray-700">
                {personalityInfo.description}
              </p>
            </div>

            {/* Answer breakdown */}
            <div className="border-t pt-4">
              <h4 className="font-semibold mb-3">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:</h4>
              <div className="space-y-2">
                {result.answers.map((answer, index) => (
                  <div key={index} className="flex justify-between items-center text-sm">
                    <span>‡∏Ç‡πâ‡∏≠ {index + 1}</span>
                    <div className="flex gap-2">
                      <Badge variant={answer.isCorrect ? "default" : "destructive"}>
                        {answer.isCorrect ? "‡∏ñ‡∏π‡∏Å" : "‡∏ú‡∏¥‡∏î"}
                      </Badge>
                      <Badge variant="outline">
                        {answer.personality === 'careful' ? '‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á' : '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢'}
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Actions */}
            <div className="flex gap-3 pt-4">
              <Button onClick={handleRestart} variant="outline" className="flex-1">
                <RotateCcw className="w-4 h-4 mr-2" />
                ‡∏ó‡∏≥‡πÉ‡∏´‡∏°‡πà
              </Button>
              <Button 
                onClick={() => {
                  if (navigator.share) {
                    navigator.share({
                      title: '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏∞‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏π‡πâ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏â‡πâ‡∏≠‡πÇ‡∏Å‡∏á',
                      text: `‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ${result.score}/${result.totalQuestions} ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô${personalityInfo.title}`,
                    });
                  }
                }}
                className="flex-1 bg-quiz-blue hover:bg-quiz-blue-dark"
              >
                <Share2 className="w-4 h-4 mr-2" />
                ‡πÅ‡∏ä‡∏£‡πå
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Tips card */}
        <Card>
          <CardHeader>
            <CardTitle className="text-lg text-quiz-blue-dark">
              üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏â‡πâ‡∏≠‡πÇ‡∏Å‡∏á
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="space-y-2 text-sm">
              <li>‚Ä¢ ‡πÑ‡∏°‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢</li>
              <li>‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏≠‡∏û‡∏Å‡∏π‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô website ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡πÅ‡∏´‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢</li>
              <li>‚Ä¢ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡πÅ‡∏õ‡∏•‡∏Å‡∏´‡∏ô‡πâ‡∏≤</li>
              <li>‚Ä¢ ‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à</li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default Result;
